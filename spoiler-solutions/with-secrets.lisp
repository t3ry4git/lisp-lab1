(defvar my-list nil)
(setq my-list
    (cons 'x
          (cons 7
                (cons 'y
                      (cons (list 'a 'b)
                            (list 'z (list 42 43) nil))))))
(format t "~%1. Printing my-list")
(print my-list)
(format t "~%2. Printing head of my-list")
(print (car my-list))
(format t "~%3. Printing tail of my-list")
(print (cdr my-list))
(format t "~%4. Printing third element of my-list")
(print (nth 2 my-list))
(format t "~%5. Printing last element of my-list")
(print (car (last my-list)))
(format t "~%6.1.1 Printing check ATOMarity of first element of my-list => 'X' ")
(print (atom (car my-list)))
(format t "~%6.1.2 Printing check ATOMarity of fourth element of my-list => '(A B)' ")
(print (atom (nth 3 my-list)))
(format t "~%6.1.3 Printing check ATOMarity of last element of my-list 'NIL' ")
(print (atom (car (last my-list))))
(format t "~%6.2.1 Printing check LISTParity of first element of my-list => 'X' ")
(print (listp (car my-list)))
(format t "~%6.2.2 Printing check LISTParity of fourth element of my-list => '(A B)' ")
(print (listp (nth 3 my-list)))
(format t "~%6.2.3 Printing check LISTParity of last element of my-list 'NIL' ")
(print (listp (car (last my-list))))
(format t "~%7.1.1 Printing check EQLarity of first element of my-list => 'X' and 'x' ")
(print (eql (car my-list) 'x))
(format t "~%7.1.2 Printing check EQLarity of second element of my-list => '7' and 7.0 ")
(print (eql (second my-list) 7.0))
(format t "~%7.1.3 Printing check EQLarity of fourth element of my-list => '(A B)' and (A B) ")
(print (eql (nth 3 my-list) '('a 'b)))
(format t "~%7.2.1 Printing check NULLarity of first element of my-list => 'X' ")
(print (eql (car my-list) 'x))
(format t "~%7.2.2 Printing check NULLarity of fourth element of my-list => '(A B)' ")
(print (eql (nth 3 my-list) 7.0))
(format t "~%7.2.3 Printing check NULLarity of last element of my-list 'NIL' ")
(print (eql (car (last my-list)) '('a 'b)))
(format t "~%7.3.1 Printing check EQUALParity of first element of my-list => 'X' and x ")
(print (equalp (car my-list) 'x))
(format t "~%7.3.2 Printing check EQUALParity of second element of my-list => '7' and 7.0 ")
(print (equalp (second my-list) 7.0))
(format t "~%7.3.3 Printing check EQLUALParity of fourth element of my-list => '(A B)' and (A B) ")
(print (equalp (nth 3 my-list) (list 'a 'b)))
(format t "~%8. Printing appended my-list with fourth element of my list => '(A B)' ")
(print (append my-list (nth 3 my-list)))
(format t "~%9. Resolving task, variant number 22 => 22mod8 => 6")
(defvar list-six nil)
(defvar include-in-six nil)
(setq include-in-six '(6 5 4)
  list-six (cons (car (last include-in-six))
                 (cons 'd (list 'e include-in-six))))
(print list-six)
(format t "~%SECRET V1")
(defvar list-one nil)
(defvar include-in-one nil)
(setq include-in-one '(b 1) list-one (list 'a (list 'b (car (last include-in-one))) 'c include-in-one))
(print list-one)
(format t "~%SECRET V2")
(defvar list-two nil)
(defvar include-in-two nil)
(setq include-in-two '(2 1) list-two (list (cons 'a include-in-two) 'b include-in-two 'c))
(print list-two)
(format t "~%SECRET V3")
(defvar list-three nil)
(defvar include-in-three nil)
(setq include-in-three '(3 c b) list-three (list 1 'a (last include-in-three) include-in-three))
(print list-three)
(format t "~%SECRET V4")
(defvar list-four nil)
(defvar include-in-four nil)
(setq include-in-four 'a list-four (list (list 1 include-in-four) (list 2 include-in-four) (list 3 include-in-four) 'c))
(print list-four)
(format t "~%SECRET V5")
(defvar list-five nil)
(defvar include-in-five nil)
(setq include-in-five '(4 e f) list-five (list 'd include-in-five (list (list 5) (car (last include-in-five)))))
(print list-five)
(format t "~%SECRET V7")
(defvar list-seven nil)
(defvar include-in-seven nil)
(setq include-in-seven '(d e f) list-seven (list include-in-seven (rest include-in-seven) (last include-in-seven) 4))
(print list-seven)
(format t "~%SECRET V8")
(defvar list-eight nil)
(defvar include-in-eight nil)
(setq include-in-eight 'd list-eight (list (list 4 (list include-in-eight) 5) 'e 'f (list 6 include-in-eight)))
(print list-eight)